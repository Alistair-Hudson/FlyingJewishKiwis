//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.6.3
//     from Assets/Input/Input.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

namespace FlyingJewishKiwis.Controls
{
    public partial class @Input: IInputActionCollection2, IDisposable
    {
        public InputActionAsset asset { get; }
        public @Input()
        {
            asset = InputActionAsset.FromJson(@"{
    ""name"": ""Input"",
    ""maps"": [
        {
            ""name"": ""AimAndShoot"",
            ""id"": ""506bccf3-ce90-4d62-b84a-9673cbe6b727"",
            ""actions"": [
                {
                    ""name"": ""Shoot"",
                    ""type"": ""Button"",
                    ""id"": ""7900545b-3151-4700-b087-9ed6f679a022"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Aim"",
                    ""type"": ""Value"",
                    ""id"": ""7776ce89-11c3-47e6-9c40-2af5b64ceb15"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""ExitLevel"",
                    ""type"": ""Button"",
                    ""id"": ""a8b57fe5-739f-471a-9bc2-04b2a07254d7"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""3fad27e4-19d2-48f2-b04b-42a7603d7255"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""AimAndShoot"",
                    ""action"": ""Shoot"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""3681b934-4b26-432e-a469-340c8f6c2abd"",
                    ""path"": ""<Mouse>/delta"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""AimAndShoot"",
                    ""action"": ""Aim"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""20b30ab2-bf6e-4384-86c4-a034404fa2b0"",
                    ""path"": ""<Keyboard>/escape"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""AimAndShoot"",
                    ""action"": ""ExitLevel"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""AimAndShoot"",
            ""bindingGroup"": ""AimAndShoot"",
            ""devices"": [
                {
                    ""devicePath"": ""<Mouse>"",
                    ""isOptional"": false,
                    ""isOR"": false
                },
                {
                    ""devicePath"": ""<Keyboard>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        }
    ]
}");
            // AimAndShoot
            m_AimAndShoot = asset.FindActionMap("AimAndShoot", throwIfNotFound: true);
            m_AimAndShoot_Shoot = m_AimAndShoot.FindAction("Shoot", throwIfNotFound: true);
            m_AimAndShoot_Aim = m_AimAndShoot.FindAction("Aim", throwIfNotFound: true);
            m_AimAndShoot_ExitLevel = m_AimAndShoot.FindAction("ExitLevel", throwIfNotFound: true);
        }

        public void Dispose()
        {
            UnityEngine.Object.Destroy(asset);
        }

        public InputBinding? bindingMask
        {
            get => asset.bindingMask;
            set => asset.bindingMask = value;
        }

        public ReadOnlyArray<InputDevice>? devices
        {
            get => asset.devices;
            set => asset.devices = value;
        }

        public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

        public bool Contains(InputAction action)
        {
            return asset.Contains(action);
        }

        public IEnumerator<InputAction> GetEnumerator()
        {
            return asset.GetEnumerator();
        }

        IEnumerator IEnumerable.GetEnumerator()
        {
            return GetEnumerator();
        }

        public void Enable()
        {
            asset.Enable();
        }

        public void Disable()
        {
            asset.Disable();
        }

        public IEnumerable<InputBinding> bindings => asset.bindings;

        public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
        {
            return asset.FindAction(actionNameOrId, throwIfNotFound);
        }

        public int FindBinding(InputBinding bindingMask, out InputAction action)
        {
            return asset.FindBinding(bindingMask, out action);
        }

        // AimAndShoot
        private readonly InputActionMap m_AimAndShoot;
        private List<IAimAndShootActions> m_AimAndShootActionsCallbackInterfaces = new List<IAimAndShootActions>();
        private readonly InputAction m_AimAndShoot_Shoot;
        private readonly InputAction m_AimAndShoot_Aim;
        private readonly InputAction m_AimAndShoot_ExitLevel;
        public struct AimAndShootActions
        {
            private @Input m_Wrapper;
            public AimAndShootActions(@Input wrapper) { m_Wrapper = wrapper; }
            public InputAction @Shoot => m_Wrapper.m_AimAndShoot_Shoot;
            public InputAction @Aim => m_Wrapper.m_AimAndShoot_Aim;
            public InputAction @ExitLevel => m_Wrapper.m_AimAndShoot_ExitLevel;
            public InputActionMap Get() { return m_Wrapper.m_AimAndShoot; }
            public void Enable() { Get().Enable(); }
            public void Disable() { Get().Disable(); }
            public bool enabled => Get().enabled;
            public static implicit operator InputActionMap(AimAndShootActions set) { return set.Get(); }
            public void AddCallbacks(IAimAndShootActions instance)
            {
                if (instance == null || m_Wrapper.m_AimAndShootActionsCallbackInterfaces.Contains(instance)) return;
                m_Wrapper.m_AimAndShootActionsCallbackInterfaces.Add(instance);
                @Shoot.started += instance.OnShoot;
                @Shoot.performed += instance.OnShoot;
                @Shoot.canceled += instance.OnShoot;
                @Aim.started += instance.OnAim;
                @Aim.performed += instance.OnAim;
                @Aim.canceled += instance.OnAim;
                @ExitLevel.started += instance.OnExitLevel;
                @ExitLevel.performed += instance.OnExitLevel;
                @ExitLevel.canceled += instance.OnExitLevel;
            }

            private void UnregisterCallbacks(IAimAndShootActions instance)
            {
                @Shoot.started -= instance.OnShoot;
                @Shoot.performed -= instance.OnShoot;
                @Shoot.canceled -= instance.OnShoot;
                @Aim.started -= instance.OnAim;
                @Aim.performed -= instance.OnAim;
                @Aim.canceled -= instance.OnAim;
                @ExitLevel.started -= instance.OnExitLevel;
                @ExitLevel.performed -= instance.OnExitLevel;
                @ExitLevel.canceled -= instance.OnExitLevel;
            }

            public void RemoveCallbacks(IAimAndShootActions instance)
            {
                if (m_Wrapper.m_AimAndShootActionsCallbackInterfaces.Remove(instance))
                    UnregisterCallbacks(instance);
            }

            public void SetCallbacks(IAimAndShootActions instance)
            {
                foreach (var item in m_Wrapper.m_AimAndShootActionsCallbackInterfaces)
                    UnregisterCallbacks(item);
                m_Wrapper.m_AimAndShootActionsCallbackInterfaces.Clear();
                AddCallbacks(instance);
            }
        }
        public AimAndShootActions @AimAndShoot => new AimAndShootActions(this);
        private int m_AimAndShootSchemeIndex = -1;
        public InputControlScheme AimAndShootScheme
        {
            get
            {
                if (m_AimAndShootSchemeIndex == -1) m_AimAndShootSchemeIndex = asset.FindControlSchemeIndex("AimAndShoot");
                return asset.controlSchemes[m_AimAndShootSchemeIndex];
            }
        }
        public interface IAimAndShootActions
        {
            void OnShoot(InputAction.CallbackContext context);
            void OnAim(InputAction.CallbackContext context);
            void OnExitLevel(InputAction.CallbackContext context);
        }
    }
}
